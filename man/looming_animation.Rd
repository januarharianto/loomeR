% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/looming_animation.R
\name{looming_animation}
\alias{looming_animation}
\title{Create a looming animation}
\usage{
looming_animation(x, ...)
}
\arguments{
\item{x}{list. A list object of class \code{constant_speed_model}.}

\item{correction}{numeric. Correction factor for the display used to play the animation. Default = 0.0285.
Typically falls between 0.02-0.03. Exact value can be determined using \code{\link{looming_animation_calib}}}

\item{width}{numeric. Width resolution of the display. E.g. for a display set at 1080p resolution (1920x1080),
this is \code{width = 1080}. Note: this is NOT the native resolution, but the display resolution as set in the
operating system settings. Visit \url{https://whatismyscreenresolution.com} on the playback display to check.}

\item{height}{numeric. Height resolution of the display. E.g. for a display set at 1080p resolution (1920x1080),
this is \code{width = 1920}. Note: this is NOT the native resolution, but the display resolution as set in the
operating system settings. Visit \url{https://whatismyscreenresolution.com} on the playback display to check.}

\item{fill}{string. Colour of the circle.}

\item{background}{string. Colour of the background.}

\item{dots}{logical. Controls if frame tracking dots are added to animation frames (see details).}

\item{dots_interval}{numeric. Interval in frames from starting frame when dots are added.}

\item{dots_colour}{string. Colour of dots}

\item{dots_position}{string. Corner in which to display dots: \code{tr}, \code{tl}, \code{br}, \code{bl},
indicating top right, top left, bottom right, or bottom left.}

\item{dots_size}{numeric. Size of added dots. Default = 0.005.}

\item{frame_number}{logical. Controls if numbers are added to animation frames (see details).}

\item{frame_number_colour}{string. Colour of frame numbers}

\item{frame_number_position}{string. Corner in which to display frame numbers: \code{tr}, \code{tl}, \code{br},
\code{bl}, indicating top right, top left, bottom right, or bottom left.}

\item{frame_number_size}{numeric. Size of frame numbers as proportion of default plotting text size. Default = 2.}

\item{frame_number_rotation}{numeric. Value in degrees (0-360) to rotate frame numbers.}

\item{save_data}{logical. If \code{=TRUE}, exports as a \code{.csv} the data used to make the animation, including
the column of values scaled using the \code{correction} value.
File name: \code{ANIM_from_**name of R object used**_**frame rate**_**display resolution**.csv}}
}
\value{
An \code{.mp4} video saved to the current working directory called \code{animation.mp4}
}
\description{
\code{looming_animation} creates a movie files (\code{.mp4}) from an animation of a circle increasing in size which
represents an object (e.g. an attacking predator) coming towards a target. The input must be an object created in
\code{\link{constant_speed_model}}, which is where the parameters determining the size and speed of the simulation are
determined. It requires \code{ffmpeg} (\url{http://ffmpeg.org}), an external, cross-platform, command line utility for
encoding video, to be installed on your system.
}
\details{
NOTE - The function works by saving an image (\code{loom_img_*******.png} file) for every frame of the animation
to the current working directory. It then uses \code{ffmpeg} to encode these images to an \code{.mp4} file
(saved as \code{animation.mp4}). It then deletes the \code{.png} files from the working directory. It will overwrite any
\code{.png} or \code{.mp4} file it encounters which has an identical name. It's recommended you create a new directory
(i.e. folder) for each animation, and use \code{setwd()} to set this as the current working directory before running the
function. If you want to save an animation, move it or rename it before running the function again or it will get overwritten.
I have not tested this on old systems with slow read-write speeds to the hard drive. This may cause problems. Please
provide feedback if you encounter any problems.

The function creates a video at the frame rate (\code{anim_frame_rate}) specified in the \code{\link{constant_speed_model}}
object. The frame rate should be one the playback software handles correctly. Most modern displays have a maximum refresh
rate of 60 Hz, so videos at frame rates higher than this may not be displayed correctly. I recommend using either 30
or 60 frames per second (Hz). The output video is a circle increasing in diameter over time, as specified in the
\code{$model$diam_on_screen} component of the \code{\link{constant_speed_model}} object.

The display resolution of the screen you will use to play the animation should be entered as \code{width} and
\code{height}. NOTE - This is the current DISPLAY resolution, which is not necessarily the native resolution
of the screen, but determined in the Displays preferences of your operating system. If you are unsure, visit
\url{https://whatismyscreenresolution.com} on the device. These settings ensure the animation is in the
correct aspect ratio and uses the full screen (although you can modify the aspect ratio if, for example,
you want your animation to be square). Incorrect resolution values *should* still produce the correct widths onscreen,
however I cannot guarantee all playback software will honour this, so best to follow the above guidelines.

All screens are different, so an object of a hypothetical size may displayed at a different size on a different
screen, due to differences in resolution or the physical size of the pixels that make up the screen. The \code{correction}
operator is intended to be a display-specific correction factor to ensure the actual, physical size of the circle
matches the diameters in the \code{$model$diam_on_screen} component of the \code{\link{constant_speed_model}} object. This
value can be determined using the \code{\link{looming_animation_calib}} function. See the documentation for this function
for instructions on its use. If creating different animations, the \code{correction} value will be the same for a particular
screen as long as the display resolution remains the same.

The circle colour and background can be specified using \code{fill} and \code{background} with standard base-R colour
syntax as used in graphics functions such as \code{plot()} etc.

In your experiment you may want to identify the particular frame of the animation at which an event such as an escape
response occurs. There are two ways of marking the animation so the frame can be identified. If \code{dots = TRUE},
a small dot is placed in the corner of the frame at the interval specified with \code{dots_interval} starting from
the first frame. The colour, size, and corner of the screen to place the dot can be specified with \code{dots_colour},
\code{dots_size}, and \code{dots_position} respectively. Alternatively, the frame number can be placed in every frame using
\code{frame_number = TRUE}. Again, colour, size and corner can be specified with \code{frame_number_colour},
\code{frame_number_size}, and \code{frame_number_position}. In addition, the frame number orientation can be set with
\code{frame_number_rotation}.

The function should work with both Windows and macOS (Linux coming soon), however it requires \code{ffmpeg}
(\url{http://ffmpeg.org}), an external, cross-platform, command line utility for encoding video, to be installed on your
system. For installation instructions see \url{http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/} (may need to
restart) or \url{https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/wiki/Installing-ffmpeg-on-Mac-OS-X}

On Windows after installation, if you encounter an error (e.g. \code{unable to start png() device}), try setting
the working directory with \code{setwd()} to the current or desired folder. Please provide feedback on any other
errors you encounter.

For triggered playback of the animation I recommend Apple Quicktime Player. Others applications such as VLC
have quirks, for example automatically closing the window at the end of the video, however find the application that works
best for your purposes. As a check, it's a good idea to ensure the application you use is correctly identifying the
metadata of the video. Open the video, pause it, make it fullscreen and then:

In Quicktime, Cmd-I or Window > Show Movie Inspector. Check 'Format' matches 'Current Size', and that both match
your entered screen resolution \code{width} and \code{height}. Check 'FPS' matches the \code{anim_frame_rate} used
to create the model in \code{\link{constant_speed_model}}.

In VLC, Cmd-I or Window > Media Information, the 'Codec Details' tab. Check 'Resolution' and 'Display Resolution'
both match your entered screen resolution \code{width} and \code{height} (there may be small differences, which is ok).
Check 'Frame Rate' matches the \code{anim_frame_rate} used to create the model in \code{\link{constant_speed_model}}.
Make sure playback speed is at 'Normal' (Menu>Playback).

The function requires the following packages: \code{plotrix}, \code{animation}, \code{glue}.
}
\examples{
# make a looming model
loom_model <- constant_speed_model(
                     screen_distance = 20,
                     anim_frame_rate = 60,
                     speed = 500,
                     attacker_diameter = 50,
                     start_distance = 1000)

# use it to create an animation with frame numbers in top right corner
looming_animation(loom_model,
                   correction = 0.0285,
                   width = 1920,
                   height = 1080,
                   frame_number = TRUE,
                   frame_number_position = "tr",
                   frame_number_size = 2)

}
\seealso{
\code{\link{constant_speed_model}}, \code{\link{looming_animation_calib}}
}
\author{
Nicholas Carey - \link{nicholascarey@gmail.com}
}
